<?php
namespace App\Services;
 
//use App\Post;
use App\Repositories\ReserveAccountRepository;
use Illuminate\Http\Request;

class ReserveAccountService{
    protected $reserveAccountRepo;
    private $reserveAccountUrl = 'https://sandbox.monnify.com/api/v1/bank-transfer/reserved-accounts';
    private $urlReservedAccountUrl = 'https://sandbox.monnify.com/api/v1/bank-transfer/reserved-accounts';

	public function __construct(ReserveAccountRepository $reserveAccountRepo){
		$this->reserveRepo = $reserveAccountRepo;
    }
    
	public function showIndex(){
		return $this->reserveRepo->indexRepo('ReservedAccount.index');
    }

    public function session_data($credential){
         if($credential->session()->has('api_token'))
        return $credential->session()->get('api_token');
    }

    public function showAccount(){
        return $this->reserveRepo->showAccountForm('ReservedAccount.accountReserved');
    }

    public static function getRefrencesName($len = 5){
        $word = array_merge(range('0', '9'), range('A', 'Z'));
        shuffle($word);
        return substr(implode($word), 0, $len);
    }

    public static function CurlGetSetOpt($url,$bearer){
        $curl = curl_init();
        curl_setopt_array($curl, array(
            CURLOPT_URL => $url,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_HTTPHEADER => array(
                "Authorization: Bearer ".$bearer, // This is the API key.
                "Content-Type: application/json",
                "Cache-Control: no-cache",
            ),
        ));
         $errors = curl_error($curl);   
         return $response =  json_decode(curl_exec($curl),true); // convert object to array
         curl_close($curl);  
    }

    public function reservedAccountCurl_API(Request $request, $user_data){ 

        $curl = curl_init();
        curl_setopt_array($curl, array(
            CURLOPT_URL => $this->reserveAccountUrl,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_POST=> true,
            CURLOPT_HTTPHEADER => array(
                
                "Authorization: Bearer ".$this->session_data($request), // This is the API key.
                "Content-Type: application/json",
                "Cache-Control: no-cache",
            ),
            CURLOPT_POSTFIELDS => $user_data, // http_vuild_query is used here for a multidimensional arrays
        ));
         $errors = curl_error($curl);   
         return $response =  json_decode(curl_exec($curl),true); // convert object to array
         curl_close($curl);  
    }

    public function storeReservedAccount(Request $request){
         $customerData = [
            'accountName' => $request->customerName,
            'accountReference' => self::getRefrencesName(), // Account Refrences is autoGenerated.
            "currencyCode"  => $request->currency,
            "contractCode"  => $request->contractCode,
            "customerEmail"  => $request->customerEmail,
        ];
        $result = $this->reservedAccountCurl_API($request, json_encode($customerData));
            if($result['requestSuccessful'] && $result['responseMessage']== 'success'){
                return redirect(route('dashboard'))->with('message','Account is Reserved Successfully');
            }else{
               return  redirect(url()->previous())->with('messageError','Failed to Reserved an Account');
            }
    }

    public function getReservedAccount(Request $request, $accountReference){
        dd(self::CurlGetSetOpt($this->urlReservedAccountUrl."/".$accountReference,$this->session_data($request)));
    }

    public function deleteReservedAccount(Request $request, $accountNumber){
        dd(self::CurlGetSetOpt($this->urlReservedAccountUrl."/".$accountNumber,$this->session_data($request)));
    }

 
}